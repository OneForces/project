from PyQt5 import QtWidgets, QtCore
from PyQt5.QtWidgets import QTableWidgetItem, QFileDialog, QMessageBox, QPushButton, QLabel, QLineEdit
from sqlalchemy.orm import subqueryload
from database.models import Assignment, User, db
from ui.roles_module_combined import log_action, ROUTING_RULES 
from datetime import datetime
import os
import shutil
from flask_app import app
import subprocess
from database.models import AssignmentStatus
from core.utils.deadline import recalculate_deadline


class AssignmentsManagerWidget(QtWidgets.QWidget):
    def __init__(self, current_user, stage_data=None, parent=None):
        super().__init__(parent)
        self.current_user = current_user
        self.stage_data = stage_data
        self.stage_id = stage_data.get("id", 1) if stage_data else 1
        self.attached_file_path = None

        self.layout = QtWidgets.QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title = QLabel(f"üì§ –≠—Ç–∞–ø {self.stage_id} - –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∏–π")
        self.layout.addWidget(self.title)
        if self.stage_id in [4, 7]:
            self.title.setText(f"üß© –≠—Ç–∞–ø {self.stage_id} ‚Äî –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
            special_label = QLabel("üìå –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è —ç—Ç–∞–ø–æ–≤ 4 –∏ 7 —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–æ–±–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            special_label.setStyleSheet("color: red; font-weight: bold;")
            self.layout.addWidget(special_label)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        self.attachButton = QPushButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")
        self.attachButton.clicked.connect(self.attach_file)
        self.layout.addWidget(self.attachButton)

        self.attachedFilesLabel = QLabel("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.layout.addWidget(self.attachedFilesLabel)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if self.stage_id not in [4, 7]:
            self.sendButton = QPushButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")
            self.sendButton.clicked.connect(self.send_assignments)
            self.layout.addWidget(self.sendButton)

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.user_table = QtWidgets.QTableWidget()
            self.user_table.setColumnCount(4)
            self.user_table.setHorizontalHeaderLabels(["–í—ã–±—Ä–∞—Ç—å", "–§–ò–û", "–ò–º—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å"])
            self.layout.addWidget(self.user_table)
            self.load_users()

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
        self.layout.addWidget(QLabel("üì• –í—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è"))
        self.table = QtWidgets.QTableWidget()
        self.layout.addWidget(self.table)
        self.load_assignments()

    def load_users(self):
        self.user_table.setRowCount(0)
        allowed_roles = ROUTING_RULES.get(self.current_user.role, [])
        with app.app_context():
            users = db.session.query(User).all()
            for user in users:
                if user.id == self.current_user.id:
                    continue
                if "*" not in allowed_roles and user.role not in allowed_roles:
                    continue

                row = self.user_table.rowCount()
                self.user_table.insertRow(row)

                checkbox = QTableWidgetItem()
                checkbox.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                checkbox.setCheckState(QtCore.Qt.Unchecked)
                checkbox.setData(QtCore.Qt.UserRole, user)

                full_info = f"{user.full_name} ({user.role})"
                self.user_table.setItem(row, 0, checkbox)
                self.user_table.setItem(row, 1, QTableWidgetItem(full_info))
                self.user_table.setItem(row, 2, QTableWidgetItem(user.username or "‚Äî"))
                self.user_table.setItem(row, 3, QTableWidgetItem(user.position or user.role or "‚Äî"))

            self.user_table.resizeColumnsToContents()

    def get_selected_users(self):
        selected = []
        for row in range(self.user_table.rowCount()):
            item = self.user_table.item(row, 0)
            if item and item.checkState() == QtCore.Qt.Checked:
                selected.append(item.data(QtCore.Qt.UserRole))
        return selected

    def attach_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        if file_path:
            self.attached_file_path = file_path
            self.attachedFilesLabel.setText(f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {os.path.basename(file_path)}")

    def send_assignments(self):
        users = self.get_selected_users()
        file_path = self.attached_file_path
        if not users or not file_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∞–π–ª.")
            return

        with app.app_context():
            for user in users:
                a = Assignment(
                    sender_id=self.current_user.id,
                    receiver_id=user.id,
                    stage_id=self.stage_id,
                    file_path=file_path,
                    response_file=None,
                    created_at=datetime.utcnow(),
                    sent_at=datetime.utcnow(),
                    status=AssignmentStatus.SENT,
                    deadline=recalculate_deadline(self.stage_id)
                )
                db.session.add(a)
            db.session.commit()

        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–ó–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        self.attached_file_path = None
        self.attachedFilesLabel.setText("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.load_assignments()

    def load_assignments(self):
        from database.models import AssignmentStatus

        with app.app_context():
            self.assignments = Assignment.query.options(
                subqueryload(Assignment.sender),
                subqueryload(Assignment.receiver),
                subqueryload(Assignment.stage)
            ).filter(
                (Assignment.receiver_id == self.current_user.id) | (Assignment.sender_id == self.current_user.id)
            ).order_by(Assignment.sent_at.desc()).all()

        self.table.setRowCount(len(self.assignments))
        self.table.setColumnCount(11)
        self.table.setHorizontalHeaderLabels([
            "–≠—Ç–∞–ø", "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å", "–§–∞–π–ª", "–û—Ç–≤–µ—Ç", "–î–µ–¥–ª–∞–π–Ω",
            "–°—Ç–∞—Ç—É—Å", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–û—Ç–∫—Ä—ã—Ç—å", "–û—Ç–≤–µ—Ç–∏—Ç—å", "–î–µ–π—Å—Ç–≤–∏—è"
        ])

        for row, a in enumerate(self.assignments):
            self.table.setItem(row, 0, QTableWidgetItem(getattr(a.stage, "name", "‚Äî")))
            self.table.setItem(row, 1, QTableWidgetItem(getattr(a.sender, "full_name", "‚Äî")))
            self.table.setItem(row, 2, QTableWidgetItem(getattr(a.receiver, "full_name", "‚Äî")))
            self.table.setItem(row, 3, QTableWidgetItem(a.file_path or "‚Äî"))
            self.table.setItem(row, 4, QTableWidgetItem(a.response_file or "‚Äî"))

            # –î–µ–¥–ª–∞–π–Ω
            deadline_str = a.deadline.strftime('%Y-%m-%d') if a.deadline else "‚Äî"
            deadline_item = QTableWidgetItem(deadline_str)
            if a.deadline and a.deadline < datetime.today().date():
                deadline_item.setForeground(QtCore.Qt.red)
            self.table.setItem(row, 5, deadline_item)

            # –°—Ç–∞—Ç—É—Å
            status_item = QTableWidgetItem(a.status.value if hasattr(a.status, "value") else a.status)
            if a.status == AssignmentStatus.ACCEPTED:
                status_item.setBackground(QtCore.Qt.green)
            elif a.status == AssignmentStatus.REJECTED:
                status_item.setBackground(QtCore.Qt.red)
            elif a.status == AssignmentStatus.SENT:
                status_item.setBackground(QtCore.Qt.yellow)
            self.table.setItem(row, 6, status_item)

            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment_input = QLineEdit()
            comment_input.setPlaceholderText("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏)")
            self.table.setCellWidget(row, 7, comment_input)

            # –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
            open_btn = QPushButton("üìÇ")
            open_btn.clicked.connect(lambda _, path=a.file_path: self.open_file(path))
            self.table.setCellWidget(row, 8, open_btn)

            # –û—Ç–≤–µ—Ç–∏—Ç—å
            reply_btn = QPushButton("üì§")
            reply_btn.clicked.connect(lambda _, r=row: self.reply_to_assignment(r))
            self.table.setCellWidget(row, 9, reply_btn)

            # –î–µ–π—Å—Ç–≤–∏—è: –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å
            action_widget = QtWidgets.QWidget()
            action_layout = QtWidgets.QHBoxLayout()
            action_layout.setContentsMargins(0, 0, 0, 0)
            action_widget.setLayout(action_layout)

            accept_btn = QPushButton("‚úÖ")
            reject_btn = QPushButton("‚ùå")

            def make_handler(accepted, assignment_id=a.id, comment_widget=comment_input):
                def handler():
                    with app.app_context():
                        assignment = db.session.query(Assignment).get(assignment_id)
                        if not assignment:
                            return
                        if self.stage_id in [4, 7]:
                            log_action(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–∞ {self.stage_id}")
                        assignment.status = AssignmentStatus.ACCEPTED if accepted else AssignmentStatus.REJECTED
                        assignment.review_comment = None if accepted else comment_widget.text()
                        assignment.reviewed_at = datetime.utcnow()

                        # –¶–∏–∫–ª: 13 ‚Üí 1
                        if accepted and assignment.stage_id == 13:
                            assignment.stage_id = 1

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
                        if not accepted:
                            assignment.deadline = recalculate_deadline(assignment.stage_id)

                        db.session.commit()

                        msg = (
                            f"‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ." if accepted
                            else f"‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {assignment.review_comment}"
                        )
                        send_notification(assignment.sender_id, msg)

                    self.load_assignments()
                return handler

            accept_btn.clicked.connect(make_handler(True))
            reject_btn.clicked.connect(make_handler(False))
            action_layout.addWidget(accept_btn)
            action_layout.addWidget(reject_btn)
            self.table.setCellWidget(row, 10, action_widget)

        self.table.resizeColumnsToContents()

    def reply_to_assignment(self, row):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª-–æ—Ç–≤–µ—Ç", "", "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
        )
        if not file_path:
            return

        assignment = self.assignments[row]
        dest_dir = os.path.join(os.getcwd(), "uploads", "responses")
        os.makedirs(dest_dir, exist_ok=True)

        filename = f"resp_uid{self.current_user.id}_aid{assignment.id}_{os.path.basename(file_path)}"
        dest_path = os.path.join(dest_dir, filename)

        try:
            shutil.copy(file_path, dest_path)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Flask
        from flask_app import app  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Flask
        with app.app_context():
            assignment.response_file   = os.path.relpath(dest_path, os.getcwd())
            assignment.sent_at         = datetime.utcnow()
            assignment.status          = AssignmentStatus.SENT
            assignment.review_comment  = None
            assignment.reviewed_at     = None
            db.session.commit()

        log_action(
            user_id=self.current_user.id,
            action_type="–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ",
            description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ"
        )

        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        self.load_assignments()


    def open_file(self, path):
        if not path or not os.path.exists(path):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{path}")
            return
        try:
            if os.name == "nt":
                os.startfile(path)
            else:
                subprocess.call(["xdg-open", path])
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:\n{e}")

def send_notification(user_id: int, message: str):
    with app.app_context():
        from database.models import Notification
        notif = Notification(recipient_id=user_id, message=message, created_at=datetime.utcnow())
        db.session.add(notif)
        db.session.commit()

