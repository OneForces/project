from PyQt5 import QtWidgets, QtCore
from PyQt5.QtWidgets import QTableWidgetItem, QFileDialog, QMessageBox, QPushButton, QLabel
from sqlalchemy.orm import subqueryload
from database.models import Assignment, User, db
from ui.roles_module_combined import log_action
from flask import current_app as app
from ui.roles_module_combined import ROUTING_RULES
from datetime import datetime
import os
import shutil
import subprocess
from flask_app import app
from db_instance import db
from database.models import User

class AssignmentsManagerWidget(QtWidgets.QWidget):
    def __init__(self, current_user, stage_data=None, parent=None):
        super().__init__(parent)
        self.current_user = current_user
        self.stage_data = stage_data
        self.stage_id = stage_data.get("id", 1) if stage_data else 1
        self.attached_file_path = None

        self.layout = QtWidgets.QVBoxLayout(self)

        # --- –í–µ—Ä—Ö: –ø–∞–Ω–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∫–∏ ---
        self.title = QLabel(f"üì§ –≠—Ç–∞–ø {self.stage_id} - –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∏–π")
        self.layout.addWidget(self.title)

        self.attachButton = QPushButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")
        self.attachButton.clicked.connect(self.attach_file)
        self.layout.addWidget(self.attachButton)

        self.attachedFilesLabel = QLabel("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.layout.addWidget(self.attachedFilesLabel)

        self.sendButton = QPushButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")
        self.sendButton.clicked.connect(self.send_assignments)
        self.layout.addWidget(self.sendButton)

        self.user_table = QtWidgets.QTableWidget()
        self.user_table.setColumnCount(4)
        self.user_table.setHorizontalHeaderLabels(["–í—ã–±—Ä–∞—Ç—å", "–§–ò–û", "–ò–º—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å"])
        self.layout.addWidget(self.user_table)

        self.load_users()

        # --- –ù–∏–∑: —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π ---
        self.table = QtWidgets.QTableWidget()
        self.layout.addWidget(QtWidgets.QLabel("üì• –í—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è"))
        self.layout.addWidget(self.table)

        self.load_assignments()

    def load_users(self):
        from flask_app import app  # –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –≥–ª–æ–±–∞–ª—å–Ω–æ

        self.user_table.setRowCount(0)
        allowed_roles = ROUTING_RULES.get(self.current_user.role, [])

        with app.app_context():
            users = db.session.query(User).all()

            for user in users:
                if user.id == self.current_user.id:
                    continue
                if "*" not in allowed_roles and user.role not in allowed_roles:
                    continue

                row = self.user_table.rowCount()
                self.user_table.insertRow(row)

                checkbox = QtWidgets.QTableWidgetItem()
                checkbox.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                checkbox.setCheckState(QtCore.Qt.Unchecked)
                checkbox.setData(QtCore.Qt.UserRole, user)

                self.user_table.setItem(row, 0, checkbox)
                self.user_table.setItem(row, 1, QtWidgets.QTableWidgetItem(user.full_name))
                self.user_table.setItem(row, 2, QtWidgets.QTableWidgetItem(""))
                self.user_table.setItem(row, 3, QtWidgets.QTableWidgetItem(user.position))

            self.user_table.resizeColumnsToContents()


    def get_selected_users(self):
        selected = []
        for row in range(self.user_table.rowCount()):
            item = self.user_table.item(row, 0)
            if item and item.checkState() == QtCore.Qt.Checked:
                user = item.data(QtCore.Qt.UserRole)
                if user:
                    selected.append(user)
        return selected

    def attach_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        if file_path:
            self.attached_file_path = file_path
            self.attachedFilesLabel.setText(f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {os.path.basename(file_path)}")

    def send_assignments(self):
        users = self.get_selected_users()
        file_path = self.attached_file_path

        if not users or not file_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∞–π–ª.")
            return

        with app.app_context():
            for user in users:
                a = Assignment(
                    sender_id=self.current_user.id,
                    receiver_id=user.id,
                    stage_id=self.stage_id,
                    file_path=file_path,
                    response_file=None,
                    created_at=datetime.utcnow(),
                    sent_at=datetime.utcnow(),
                    status="–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                )
                db.session.add(a)
            db.session.commit()

        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–ó–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        self.attached_file_path = None
        self.attachedFilesLabel.setText("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.load_assignments()

    def load_assignments(self):
        with app.app_context():
            self.assignments = Assignment.query.options(
                subqueryload(Assignment.sender),
                subqueryload(Assignment.receiver),
                subqueryload(Assignment.stage)
            ).filter(
                (Assignment.receiver_id == self.current_user.id) | (Assignment.sender_id == self.current_user.id)
            ).order_by(Assignment.sent_at.desc()).all()

        self.table.setRowCount(len(self.assignments))
        self.table.setColumnCount(8)
        self.table.setHorizontalHeaderLabels([
            "–≠—Ç–∞–ø", "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å", "–§–∞–π–ª", "–û—Ç–≤–µ—Ç", "–°—Ç–∞—Ç—É—Å", "–û—Ç–∫—Ä—ã—Ç—å", "–û—Ç–≤–µ—Ç–∏—Ç—å"
        ])

        for row, a in enumerate(self.assignments):
            self.table.setItem(row, 0, QTableWidgetItem(getattr(a.stage, "name", "‚Äî")))
            self.table.setItem(row, 1, QTableWidgetItem(getattr(a.sender, "full_name", "‚Äî")))
            self.table.setItem(row, 2, QTableWidgetItem(getattr(a.receiver, "full_name", "‚Äî")))
            self.table.setItem(row, 3, QTableWidgetItem(a.file_path or "‚Äî"))
            self.table.setItem(row, 4, QTableWidgetItem(a.response_file or "‚Äî"))
            self.table.setItem(row, 5, QTableWidgetItem(a.status or "–û–∂–∏–¥–∞–Ω–∏–µ"))

            open_btn = QPushButton("üìÇ")
            open_btn.clicked.connect(lambda _, path=a.file_path: self.open_file(path))
            self.table.setCellWidget(row, 6, open_btn)

            reply_btn = QPushButton("üì§")
            reply_btn.clicked.connect(lambda _, r=row: self.reply_to_assignment(r))
            self.table.setCellWidget(row, 7, reply_btn)

        self.table.resizeColumnsToContents()

    def reply_to_assignment(self, row):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª-–æ—Ç–≤–µ—Ç", "", "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)")
        if not file_path:
            return

        assignment = self.assignments[row]
        dest_dir = os.path.join(os.getcwd(), "uploads", "responses")
        os.makedirs(dest_dir, exist_ok=True)

        filename = f"resp_uid{self.current_user.id}_aid{assignment.id}_{os.path.basename(file_path)}"
        dest_path = os.path.join(dest_dir, filename)

        try:
            shutil.copy(file_path, dest_path)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
            return

        with app.app_context():
            assignment.response_file = os.path.relpath(dest_path, os.getcwd())
            assignment.sent_at = datetime.utcnow()
            assignment.status = "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            db.session.commit()

        log_action(
            user_id=self.current_user.id,
            action_type="–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ",
            description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ"
        )

        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        self.load_assignments()

    def open_file(self, path):
        if not path or not os.path.exists(path):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{path}")
            return
        try:
            if os.name == "nt":
                os.startfile(path)
            elif os.name == "posix":
                subprocess.call(["xdg-open", path])
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
