import pymysql
import mysql.connector
from db_instance import db
from flask_app import app
from database.models import User, Stage, Assignment, AssignmentStatus
from werkzeug.security import generate_password_hash
from datetime import datetime
from sqlalchemy import inspect

def create_database():
    conn = pymysql.connect(
        host="localhost",
        user="root",
        password="root"
    )
    with conn.cursor() as cursor:
        cursor.execute("CREATE DATABASE IF NOT EXISTS project_db CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'project_db' —Å–æ–∑–¥–∞–Ω–∞.")
    conn.commit()
    conn.close()

def initialize_sqlalchemy_models():
    with app.app_context():
        db.create_all()
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –ø–æ –º–æ–¥–µ–ª—è–º SQLAlchemy.")

        # üëá –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã 'letters'
        inspector = inspect(db.engine)
        if 'letters' not in inspector.get_table_names():
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'letters' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å –º–æ–¥–µ–ª—å Letter.")
        else:
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'letters' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        
        # –≠—Ç–∞–ø—ã
        if not Stage.query.first():
            stages = [
                Stage(id=1, name='–≠—Ç–∞–ø 1', deadline=datetime(2025, 12, 31)),
                Stage(id=4, name='–≠—Ç–∞–ø 4', deadline=datetime(2025, 12, 31)),
                Stage(id=7, name='–≠—Ç–∞–ø 7', deadline=datetime(2025, 12, 31)),
            ]
            db.session.bulk_save_objects(stages)
            print("üìå –≠—Ç–∞–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if not User.query.first():
            users = [
                User(username='gk', password_hash=generate_password_hash('gk'), full_name='–ü–∞—Ö–∞–Ω–æ–≤ –ü–∞—Ö–∞–Ω', role='–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', position='–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'),
                User(username='dev1', password_hash=generate_password_hash('dev1'), full_name='–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω', role='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', position='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'),
                User(username='dev2', password_hash=generate_password_hash('dev2'), full_name='–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä', role='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', position='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'),
            ]
            db.session.bulk_save_objects(users)
            print("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

        # –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        db.session.commit()
        if not Assignment.query.first():
            sender = User.query.filter_by(username='gk').first()
            receiver = User.query.filter_by(username='dev1').first()
            stage = Stage.query.get(1)

            assignment = Assignment(
                sender_id=sender.id,
                receiver_id=receiver.id,
                stage_id=stage.id,
                file_path=None,
                response_file=None,
                status=AssignmentStatus.SENT
            )
            db.session.add(assignment)
            print("üì§ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

        db.session.commit()
        print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")


def update_schema_if_needed():
    conn = mysql.connector.connect(
        host='localhost',
        user='root',
        password='root',
        database='project_db',
    )
    cursor = conn.cursor()

    def ensure_column(cursor, table_name: str, column_name: str, column_type: str):
        query = """
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_schema = %s AND table_name = %s AND column_name = %s;
        """
        cursor.execute(query, ('project_db', table_name, column_name))
        exists = cursor.fetchone()[0]

        if not exists:
            ddl = f"ALTER TABLE `{table_name}` ADD COLUMN `{column_name}` {column_type};"
            cursor.execute(ddl)
            print(f"‚úÖ –ü–æ–ª–µ '{column_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'.")
        else:
            print(f"‚ö†Ô∏è –ü–æ–ª–µ '{column_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")

    # üëá –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    ensure_column(cursor, 'assignments', 'review_comment', 'TEXT')
    ensure_column(cursor, 'assignments', 'reviewed_at', 'DATETIME')
    ensure_column(cursor, 'assignments', 'status', "ENUM('SENT','ACCEPTED','REJECTED') DEFAULT 'SENT'")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    cursor.execute("UPDATE assignments SET status='SENT' WHERE status='–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';")
    cursor.execute("UPDATE assignments SET status='ACCEPTED' WHERE status='–ø—Ä–∏–Ω—è—Ç–æ';")
    cursor.execute("UPDATE assignments SET status='REJECTED' WHERE status='–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';")
    print("‚úÖ –°—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ENUM –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ –Ω–æ–≤—ã–º.")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å ENUM –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    cursor.execute("""
        ALTER TABLE assignments
        MODIFY COLUMN status ENUM('SENT','ACCEPTED','REJECTED') DEFAULT 'SENT';
    """)
    print("‚úÖ –ü–æ–ª–µ 'status' –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –∫ ENUM Python-–º–æ–¥–µ–ª–∏.")

    conn.commit()
    cursor.close()
    conn.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
    create_database()
    update_schema_if_needed()             # ‚¨ÖÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ç—á–∏–º —Ç–∞–±–ª–∏—Ü—É
    initialize_sqlalchemy_models()        # ‚¨ÖÔ∏è –ü–æ—Ç–æ–º —á–∏—Ç–∞–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üéâ –ì–æ—Ç–æ–≤–æ.")